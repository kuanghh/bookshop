<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!--1、配置数据库相关参数-->
	<context:property-placeholder location="classpath:spring.properties" ignore-unresolvable="true"/>
	
	<!-- 配置数据源，记得去掉myBatis-mappers.xml的数据源相关配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">			
		<property name="driverClass" value="${jdbc.driver}" />
		<!--
			一定要加上 ?useUnicode=true&amp;characterEncoding=utf-8 ，不然上传到数据库的时候会出现乱码问题
		-->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置-->
		<property name="mapperLocations" value="classpath:mappers/*.xml"/>
	</bean>
	
	<!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.khh.web.dao" />
	</bean>
	
	<!-- 配置事务管理器,管理数据源事务处理-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config>
		<aop:advisor advice-ref="advice" pointcut="bean(*Service)"/>
	</aop:config>
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>		
	</bean>
	
	<context:component-scan base-package="com.khh.*"/>


	<!-- Cache配置 -->
	<!--<cache:annotation-driven cache-manager="cacheManager"/>-->
	<!--<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"-->
		  <!--p:configLocation="classpath:ehcache.xml"/>-->
	<!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"-->
		  <!--p:cacheManager-ref="ehCacheManagerFactory"/>-->
</beans>
